<div class="task-wrapper">
    @foreach (var item in tasks)
    {
        if (tasks.Count()>0)
        {
            <div class="task-item p-3 my-3 row m-0">
                <div class="col-10 p-0">
                    <Check TValue="bool" Checked="@item.IsComplete" CheckedChanged="@(val => ToggleTask(item))">
                        <span class="@(item.IsComplete ? "done-text" : "")">@item.Subject</span>
                    </Check>
                </div>
                <div class="col-2 p-0 d-flex justify-content-end align-items-center">
                    @if (item.AssignedToId != null)
                    {
<div class="avtar mr-1" style="background-color: @selectedMember.Avatar;"></div>}
                    <img class="delete-icon" src="/assets/images/delete-icon.svg" />
                </div>
            </div>
        }
    }
</div>

@code  { 

    private IEnumerable<Domain.ViewModel.Task.TaskVM> tasks = new List<Domain.ViewModel.Task.TaskVM>();
    private MemberVm selectedMember;

    protected override Task OnInitializedAsync()
    {
        memberService.SelectedMemberChanged += MemberServiceOnSelectedMemberChanged;
        taskService.TasksUpdated += TaskServiceOnTasksUpdated;
         taskService.LoadTasks();
        LoadCurrentTasks();
        return base.OnInitializedAsync();
    }

    private void ToggleTask(Domain.ViewModel.Task.TaskVM model)
    {
        taskService.ToggleTask(model.Id);
        StateHasChanged();
    }

    private void TaskServiceOnTasksUpdated(object sender, EventArgs e)
    {
        LoadCurrentTasks();
    }

    private void MemberServiceOnSelectedMemberChanged(object sender, EventArgs e)
    {
        LoadCurrentTasks();
    }

    private void LoadCurrentTasks()
    {
        selectedMember = memberService.SelectedMember;

        if (selectedMember == null || selectedMember.Id == Guid.Empty)
        {
            tasks = taskService.TaskList;
            StateHasChanged();
            return;
        };

        tasks = taskService.TaskList.Where(t => t.AssignedToId == selectedMember.Id).ToList();
        StateHasChanged();
    }
    }